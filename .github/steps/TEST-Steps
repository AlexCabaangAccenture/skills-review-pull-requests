
using Microsoft.Azure.Functions.Extensions.DependencyInjection;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using System.IO;
using VendorPOManagement.Application.Service;
using VendorPOManagement.Application.Service.Interface;
using VendorPOManagement.Core.Utilities;
using VendorPOManagement.Core.Utilities.Interface;
using VendorPOManagement.Infra.Service;
using VendorPOManagement.Infra.Service.Interface;

[assembly: FunctionsStartup(typeof(VendorPOManagement.StartUp))]

namespace VendorPOManagement
{
    public class StartUp : FunctionsStartup
    {
        public override void Configure(IFunctionsHostBuilder builder)
        {
            // Configure application settings
            var configuration = new ConfigurationBuilder()
                 .SetBasePath(Directory.GetCurrentDirectory())
                 .AddJsonFile("local.settings.json", optional: true, reloadOnChange: true) // For local testing
                 .AddEnvironmentVariables() // For CI/CD to use Azure DevOps variables
                 .Build();

            // Register configuration
            builder.Services.AddSingleton<IConfiguration>(configuration);

            // Register application services (specific to Vendor PO Management)
            builder.Services.AddSingleton<IVendorApplication, VendorApplication>();
            builder.Services.AddSingleton<IVendorService, VendorService>();

            // Register utility services
            builder.Services.AddSingleton<ILiquidTemplateService, LiquidTemplateService>();
            builder.Services.AddSingleton<IStorageAccountService, StorageAccountService>();
            builder.Services.AddSingleton<IAPICaller, APICaller>();
            builder.Services.AddSingleton<IAzureServiceBusService, AzureServiceBusService>();
        }
    }
}
