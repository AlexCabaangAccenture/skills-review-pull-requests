
FA  char

using CAT.App.D365.Service.Application.Service;
using CAT.App.D365.Service.Application.Service.Interface;
using CAT.App.D365.Service.Infra.Service;
using CAT.App.D365.Service.Infra.Service.Interface;
using Microsoft.Azure.Functions.Extensions.DependencyInjection;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using System.IO;

[assembly: FunctionsStartup(typeof(CAT.App.D365.Service.FA.StartUp))]
namespace CAT.App.D365.Service.FA
{
    public class StartUp : FunctionsStartup
    {
        public override void Configure(IFunctionsHostBuilder builder)
        {
            var configuration = new ConfigurationBuilder()
                .SetBasePath(Directory.GetCurrentDirectory())
                .AddJsonFile("local.settings.json", optional: true, reloadOnChange: true)
                .AddEnvironmentVariables()
                .Build();

            builder.Services.AddSingleton<IConfiguration>(configuration);

            // Registering Vendor PO application and service
            builder.Services.AddSingleton<IVendorPurchaseOrderApplication, VendorPurchaseOrderApplication>();
            builder.Services.AddSingleton<IVendorPurchaseOrderService, VendorPurchaseOrderService>();

            // Existing registrations
            builder.Services.AddSingleton<IAPICaller, APICaller>();
            builder.Services.AddSingleton<ILiquidTemplateService, LiquidTemplateService>();
            builder.Services.AddSingleton<IAzureServiceBusService, AzureServiceBusService>();
        }
    }
}


-------------------------------------------


using CAT.App.D365.Service.Application.Service.Interface;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Azure.WebJobs;
using Microsoft.Azure.WebJobs.Extensions.Http;
using Microsoft.AspNetCore.Http;
using Microsoft.Extensions.Logging;
using System.IO;
using System.Threading.Tasks;

namespace CAT.App.D365.Service.FA.Triggers
{
    public class VendorPOTriggers
    {
        private readonly IVendorPurchaseOrderApplication _vendorPOApplication;

        public VendorPOTriggers(IVendorPurchaseOrderApplication vendorPOApplication)
        {
            _vendorPOApplication = vendorPOApplication;
        }

        [FunctionName("CreateVendorPurchaseOrder")]
        public async Task<IActionResult> CreateVendorPurchaseOrderAsync(
            [HttpTrigger(AuthorizationLevel.Function, "post", Route = "VendorPO/Create")] HttpRequest req,
            ILogger log)
        {
            log.LogInformation("Processing Create Vendor Purchase Order request.");

            try
            {
                string requestBody = await new StreamReader(req.Body).ReadToEndAsync();
                string response = await _vendorPOApplication.CreatePurchaseOrderAsync(requestBody);

                log.LogInformation("Vendor Purchase Order created successfully.");
                return new OkObjectResult(response);
            }
            catch (System.Exception ex)
            {
                log.LogError($"Error occurred while creating Vendor Purchase Order. {ex.Message}");
                return new BadRequestObjectResult(ex.Message);
            }
        }

        [FunctionName("UpdateVendorPurchaseOrder")]
        public async Task<IActionResult> UpdateVendorPurchaseOrderAsync(
            [HttpTrigger(AuthorizationLevel.Function, "put", Route = "VendorPO/Update")] HttpRequest req,
            ILogger log)
        {
            log.LogInformation("Processing Update Vendor Purchase Order request.");

            try
            {
                string requestBody = await new StreamReader(req.Body).ReadToEndAsync();
                string response = await _vendorPOApplication.UpdatePurchaseOrderAsync(requestBody);

                log.LogInformation("Vendor Purchase Order updated successfully.");
                return new OkObjectResult(response);
            }
            catch (System.Exception ex)
            {
                log.LogError($"Error occurred while updating Vendor Purchase Order. {ex.Message}");
                return new BadRequestObjectResult(ex.Message);
            }
        }

        [FunctionName("GetVendorPurchaseOrder")]
        public async Task<IActionResult> GetVendorPurchaseOrderAsync(
            [HttpTrigger(AuthorizationLevel.Function, "get", Route = "VendorPO/Get/{purchaseOrderId}")] HttpRequest req,
            string purchaseOrderId,
            ILogger log)
        {
            log.LogInformation($"Processing Get Vendor Purchase Order request for ID: {purchaseOrderId}");

            try
            {
                string response = await _vendorPOApplication.GetPurchaseOrderAsync(purchaseOrderId);

                log.LogInformation("Vendor Purchase Order retrieved successfully.");
                return new OkObjectResult(response);
            }
            catch (System.Exception ex)
            {
                log.LogError($"Error occurred while retrieving Vendor Purchase Order. {ex.Message}");
                return new BadRequestObjectResult(ex.Message);
            }
        }
    }
}
