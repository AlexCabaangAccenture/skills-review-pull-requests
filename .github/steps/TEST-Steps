{
  "PurchaseOrderID": "PO12345",
  "OrderDate": "2024-11-20",
  "VendorID": "V123",
  "Details": {
    "ProductID": "P001",
    "OrderQty": 10,
    "UnitPrice": 50.0
  }
}

{
  "Status": "Success",
  "Message": "Detail line added to Purchase Order PO12345"
}


{
  "Status": "Error",
  "Message": "Purchase Order PO12345 is locked. Cannot add detail line."
}
-------------
namespace CAT.App.D365.Service.Infra.Service.Interface
{
    public interface IVendorPurchaseOrderService
    {
        Task<string> CreateOrUpdatePurchaseOrderAsync(string purchaseOrderData);
        Task<bool> CheckPurchaseOrderExistsAsync(string purchaseOrderId);
    }
}
-----------------------------

using CAT.App.D365.Service.Core.Utilities.Interface;
using Microsoft.Extensions.Configuration;
using Newtonsoft.Json.Linq;
using System;
using System.Net.Http;
using System.Text;
using System.Threading.Tasks;

namespace CAT.App.D365.Service.Infra.Service
{
    public class VendorPurchaseOrderService : IVendorPurchaseOrderService
    {
        private readonly IAPICaller _apiCaller;
        private readonly IConfiguration _config;

        public VendorPurchaseOrderService(IAPICaller apiCaller, IConfiguration config)
        {
            _apiCaller = apiCaller;
            _config = config;
        }

        public async Task<string> CreateOrUpdatePurchaseOrderAsync(string purchaseOrderData)
        {
            try
            {
                JObject payload = JObject.Parse(purchaseOrderData);

                string purchaseOrderId = payload["PurchaseOrderID"]?.ToString();
                if (string.IsNullOrEmpty(purchaseOrderId))
                {
                    throw new ArgumentException("PurchaseOrderID is required.");
                }

                // Check if the Purchase Order header already exists
                bool exists = await CheckPurchaseOrderExistsAsync(purchaseOrderId);

                string endpoint = exists
                    ? _config["D365API:UpdatePurchaseOrderEndpoint"]
                    : _config["D365API:CreatePurchaseOrderEndpoint"];

                StringContent content = new StringContent(payload.ToString(), Encoding.UTF8, "application/json");

                // Call D365 API to create or update the Purchase Order
                HttpResponseMessage response = await _apiCaller.FinOpsApiCallAsync(
                    HttpMethod.Post, endpoint, content);

                if (response.IsSuccessStatusCode)
                {
                    return await response.Content.ReadAsStringAsync();
                }
                else
                {
                    throw new Exception($"Failed to process Purchase Order. Status: {response.StatusCode}");
                }
            }
            catch (Exception ex)
            {
                throw new Exception($"Error in CreateOrUpdatePurchaseOrderAsync: {ex.Message}", ex);
            }
        }

        public async Task<bool> CheckPurchaseOrderExistsAsync(string purchaseOrderId)
        {
            try
            {
                string endpoint = $"{_config["D365API:GetPurchaseOrderDetailsEndpoint"]}/{purchaseOrderId}";
                HttpResponseMessage response = await _apiCaller.FinOpsApiCallAsync(HttpMethod.Get, endpoint);

                return response.IsSuccessStatusCode;
            }
            catch (Exception ex)
            {
                throw new Exception($"Error checking if Purchase Order exists: {ex.Message}", ex);
            }
        }
    }
}

-----------------------------------------------

using CAT.App.D365.Service.Application.Service.Interface;
using CAT.App.D365.Service.Infra.Service.Interface;
using System.Threading.Tasks;

namespace CAT.App.D365.Service.Application.Service
{
    public class VendorPurchaseOrderApplication : IVendorPurchaseOrderApplication
    {
        private readonly IVendorPurchaseOrderService _service;

        public VendorPurchaseOrderApplication(IVendorPurchaseOrderService service)
        {
            _service = service;
        }

        public async Task<string> CreatePurchaseOrderAsync(string purchaseOrderData)
        {
            return await _service.CreateOrUpdatePurchaseOrderAsync(purchaseOrderData);
        }

        public async Task<string> UpdatePurchaseOrderAsync(string purchaseOrderData)
        {
            return await _service.CreateOrUpdatePurchaseOrderAsync(purchaseOrderData);
        }

        public async Task<string> GetPurchaseOrderAsync(string purchaseOrderId)
        {
            return await _service.CheckPurchaseOrderExistsAsync(purchaseOrderId)
                ? $"Purchase Order {purchaseOrderId} exists."
                : $"Purchase Order {purchaseOrderId} does not exist.";
        }
    }
}

------------------------------------

using System.IO;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Azure.WebJobs;
using Microsoft.Azure.WebJobs.Extensions.Http;
using Microsoft.AspNetCore.Http;
using Microsoft.Extensions.Logging;
using Newtonsoft.Json;
using CAT.App.D365.Service.Application.Service.Interface;

namespace CAT.App.D365.Service.FA.Triggers
{
    public class VendorPurchaseOrderTriggers
    {
        private readonly IVendorPurchaseOrderApplication _service;

        public VendorPurchaseOrderTriggers(IVendorPurchaseOrderApplication service)
        {
            _service = service;
        }

        [FunctionName("CreatePurchaseOrder")]
        public async Task<IActionResult> CreatePurchaseOrderAsync(
            [HttpTrigger(AuthorizationLevel.Function, "post", Route = "api/v1/purchase-orders/create")] HttpRequest req,
            ILogger log)
        {
            try
            {
                string requestBody = await new StreamReader(req.Body).ReadToEndAsync();
                log.LogInformation($"Received Purchase Order creation request: {requestBody}");

                string response = await _service.CreatePurchaseOrderAsync(requestBody);

                return new OkObjectResult(response);
            }
            catch (System.Exception ex)
            {
                log.LogError($"Error in CreatePurchaseOrder: {ex.Message}");
                return new BadRequestObjectResult(ex.Message);
            }
        }

        [FunctionName("UpdatePurchaseOrder")]
        public async Task<IActionResult> UpdatePurchaseOrderAsync(
            [HttpTrigger(AuthorizationLevel.Function, "post", Route = "api/v1/purchase-orders/update")] HttpRequest req,
            ILogger log)
        {
            try
            {
                string requestBody = await new StreamReader(req.Body).ReadToEndAsync();
                log.LogInformation($"Received Purchase Order update request: {requestBody}");

                string response = await _service.UpdatePurchaseOrderAsync(requestBody);

                return new OkObjectResult(response);
            }
            catch (System.Exception ex)
            {
                log.LogError($"Error in UpdatePurchaseOrder: {ex.Message}");
                return new BadRequestObjectResult(ex.Message);
            }
        }
    }
}

