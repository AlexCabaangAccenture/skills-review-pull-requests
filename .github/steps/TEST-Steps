application files for coding (Test files char)


using System.Threading.Tasks;

namespace CAT.App.D365.Service.Application.Service.Interface
{
    public interface IVendorPurchaseOrderApplication
    {
        Task<string> CreatePurchaseOrderAsync(string purchaseOrderData);

        Task<string> UpdatePurchaseOrderAsync(string purchaseOrderData);

        Task<string> GetPurchaseOrderAsync(string purchaseOrderId);
    }
}


------------------------------------

using CAT.App.D365.Service.Application.Service.Interface;
using CAT.App.D365.Service.Infra.Service;
using CAT.App.D365.Service.Core.Utilities.Interface;
using Microsoft.Extensions.Logging;
using Newtonsoft.Json.Linq;
using System;
using System.Threading.Tasks;

namespace CAT.App.D365.Service.Application.Service
{
    public class VendorPurchaseOrderApplication : IVendorPurchaseOrderApplication
    {
        private readonly IVendorPurchaseOrderService _vendorPOService;
        private readonly ILiquidTemplateService _liquidTemplateService;
        private readonly ILogger<VendorPurchaseOrderApplication> _logger;

        public VendorPurchaseOrderApplication(
            IVendorPurchaseOrderService vendorPOService, 
            ILiquidTemplateService liquidTemplateService, 
            ILogger<VendorPurchaseOrderApplication> logger)
        {
            _vendorPOService = vendorPOService;
            _liquidTemplateService = liquidTemplateService;
            _logger = logger;
        }

        public async Task<string> CreatePurchaseOrderAsync(string purchaseOrderData)
        {
            try
            {
                _logger.LogInformation("Processing Create Purchase Order request.");

                // Validate incoming payload
                if (string.IsNullOrWhiteSpace(purchaseOrderData))
                {
                    _logger.LogError("Invalid Purchase Order Data. Payload is empty or null.");
                    throw new ArgumentException("Purchase Order Data cannot be null or empty.");
                }

                // Transform input using Liquid Template (if needed)
                var transformedData = await _liquidTemplateService.GetLiquidTemplateAsync(
                    purchaseOrderData,
                    "CreatePurchaseOrderTemplate.liquid");

                // Delegate to service layer to handle D365 API interaction
                var response = await _vendorPOService.CreatePurchaseOrderAsync(transformedData);

                _logger.LogInformation("Purchase Order Created Successfully. Response: {Response}", response);

                return response;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error occurred while creating Purchase Order.");
                throw;
            }
        }

        public async Task<string> UpdatePurchaseOrderAsync(string purchaseOrderData)
        {
            try
            {
                _logger.LogInformation("Processing Update Purchase Order request.");

                // Validate incoming payload
                if (string.IsNullOrWhiteSpace(purchaseOrderData))
                {
                    _logger.LogError("Invalid Purchase Order Data. Payload is empty or null.");
                    throw new ArgumentException("Purchase Order Data cannot be null or empty.");
                }

                // Transform input using Liquid Template (if needed)
                var transformedData = await _liquidTemplateService.GetLiquidTemplateAsync(
                    purchaseOrderData,
                    "UpdatePurchaseOrderTemplate.liquid");

                // Delegate to service layer to handle D365 API interaction
                var response = await _vendorPOService.UpdatePurchaseOrderAsync(transformedData);

                _logger.LogInformation("Purchase Order Updated Successfully. Response: {Response}", response);

                return response;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error occurred while updating Purchase Order.");
                throw;
            }
        }

        public async Task<string> GetPurchaseOrderAsync(string purchaseOrderId)
        {
            try
            {
                _logger.LogInformation("Processing Get Purchase Order request for ID: {PurchaseOrderId}", purchaseOrderId);

                // Validate input
                if (string.IsNullOrWhiteSpace(purchaseOrderId))
                {
                    _logger.LogError("Invalid Purchase Order ID. ID cannot be null or empty.");
                    throw new ArgumentException("Purchase Order ID cannot be null or empty.");
                }

                // Delegate to service layer to handle D365 API interaction
                var response = await _vendorPOService.GetPurchaseOrderAsync(purchaseOrderId);

                _logger.LogInformation("Purchase Order Retrieved Successfully. Response: {Response}", response);

                return response;
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error occurred while retrieving Purchase Order.");
                throw;
            }
        }
    }
}
f
