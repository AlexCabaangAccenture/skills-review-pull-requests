
using CAT.App.D365.Service.Core;
using CAT.App.D365.Service.Core.Models;
using CAT.App.D365.Service.Core.Utilities;
using CAT.App.D365.Service.Core.Utilities.Interface;
using CAT.App.D365.Service.Infra.Service;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace CAT.App.D365.Service.Application.Service
{
    public class JournalApplication : IJournalApplication
    {
        private readonly IJournalService _service;
        private readonly ILiquidTemplateService _liquidTemplateService;

        public JournalApplication(IJournalService service, ILiquidTemplateService liquidTemplateService)
        {
            _liquidTemplateService = liquidTemplateService;
            _service = service;
        }
        public async Task<string> GetJournalNameAsync(string companyId, string customerAccount)
        {
            try
            {
                var response = await _service.GetJournalNameAsync(companyId, customerAccount);
                var responsePayload = await _liquidTemplateService.GetLiquidTemplateAsync(response, LiquidTemplateConstants.RESPONSE_GET_JOURNAL_NAME_TEMPLATE);
                return responsePayload.ToString();
            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message, ex);
            }
        }

        public async Task<string> GetPostedJournalAsync(string transactionType, IRequestCriteria? criteria)
        {
            try
            { 
                var response = await _service.GetPostedJournalAsync(transactionType, criteria);
                return response;
            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message, ex);
            }
        }

        public async Task<string> CreateJournalEntryAsync(string journalEntry)
        {
            try
            {
                var response = await _service.CreateJournalEntryAsync(journalEntry);
                return response;
            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message, ex);
            }
        }

        public async Task<string> SendJournalEntryAsync(string journalEntry, string transactionType)
        {
            try
            {
                var response = await _service.SendJournalEntryAsync(journalEntry, transactionType);
                return response;
            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message, ex);
            }
        }
    }
}
