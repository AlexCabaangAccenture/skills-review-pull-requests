
using CAT.App.D365.Service.Application.Service;
using CAT.App.D365.Service.Application.Service.Interface;
using CAT.App.D365.Service.Core.Utilities;
using CAT.App.D365.Service.Core.Utilities.Interface;
using CAT.App.D365.Service.Infra.Service;
using CAT.App.D365.Service.Infra.Service.Interface;
using Microsoft.Azure.Functions.Extensions.DependencyInjection;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using System.IO;


[assembly: FunctionsStartup(typeof(CAT.App.D365.Service.FA.StartUp))]
namespace CAT.App.D365.Service.FA
{
    public class StartUp: FunctionsStartup
    {
        public override void Configure(IFunctionsHostBuilder builder)
        {
            var configuration = new ConfigurationBuilder()
                 .SetBasePath(Directory.GetCurrentDirectory())
                 .AddJsonFile("local.settings.json", optional: true, reloadOnChange: true) //For local testing
                 .AddEnvironmentVariables() //for CICD to use azure devops variables
                 .Build();

            builder.Services.AddSingleton<IConfiguration>(configuration);
            builder.Services.AddSingleton<ICustomerApplication, CustomerApplication>();
            builder.Services.AddSingleton<ICustomerService, CustomerService>();
            builder.Services.AddSingleton<IJournalApplication, JournalApplication>();
            builder.Services.AddSingleton<IJournalService, JournalService>();
            builder.Services.AddSingleton<ICompanyApplication, CompanyApplication>();
            builder.Services.AddSingleton<ICompanyService, CompanyService>();
            builder.Services.AddSingleton<IExchangeRateApplication, ExchangeRateApplication>();
            builder.Services.AddSingleton<IExchangeRateService, ExchangeRateService>();
            builder.Services.AddSingleton<ICreditApplication, CreditApplication>();
            builder.Services.AddSingleton<ICreditService, CreditService>();
            builder.Services.AddSingleton<IPeriodApplication, PeriodApplication>();
            builder.Services.AddSingleton<IPeriodService, PeriodService>();
            builder.Services.AddSingleton<IAgingBucketsApplication, AgingBucketsApplication>();
            builder.Services.AddSingleton<IAgingBucketsService, AgingBucketsService>();
            builder.Services.AddSingleton<IAccountApplication, AccountApplication>();
            builder.Services.AddSingleton<IAccountService, AccountService>();
            builder.Services.AddSingleton<IFinancialReportApplication, FinancialReportApplication>();
            builder.Services.AddSingleton<IFinancialReportService, FinancialReportService>();
            builder.Services.AddSingleton<INotesPaymentApplication, NotesPaymentApplication>();
            builder.Services.AddSingleton<INotesPaymentService, NotesPaymentService>();
            builder.Services.AddSingleton<IEMSTransactionsApplication, EMSTransactionsApplication>();
            builder.Services.AddSingleton<IEMSTransactionsService, EMSTransactionsService>();
            builder.Services.AddSingleton<ILiquidTemplateService, LiquidTemplateService>();
            builder.Services.AddSingleton<IStorageAccountService, StorageAccountService>();
            builder.Services.AddSingleton<IAPICaller, APICaller>();
            builder.Services.AddSingleton<IAzureServiceBusService, AzureServiceBusService>();
        }
    }
}
